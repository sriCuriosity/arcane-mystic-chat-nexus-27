from fastapi import FastAPI
from pydantic import BaseModel
import spacy

app = FastAPI()

# Load transformer model for semantic similarity
nlp = spacy.load("en_core_web_trf")


intentions = [
    "Studying for exams",
    "Summarizing books, articles, or text",
    "Writing essays, reports, or academic papers",
    "Generating creative stories",
    "Writing poems or lyrics",
    "Practicing conversation in different languages",
    "Translating text between languages",
    "Generating or debugging code",
    "Writing resumes and cover letters",
    "Preparing for interviews",
    "Researching topics quickly",
    "Asking for help with homework",
    "Explaining complex concepts",
    "Creating business plans",
    "Brainstorming product or content ideas",
    "Writing marketing copy",
    "Composing social media posts",
    "Creating content calendars",
    "Generating SEO-optimized content",
    "Drafting emails",
    "Learning new skills",
    "Creating quizzes, practice questions, or test materials",
    "Writing jokes, scripts, or comedy sketches",
    "Simulating characters for games or stories",
    "Creating D&D campaigns or adventures",
    "Providing mental health reflection or support",
    "Simulating a therapist, coach, or life coach",
    "Giving relationship advice",
    "Planning travel itineraries",
    "Creating meal plans or recipes",
    "Providing shopping advice or product comparisons",
    "Editing and proofreading text",
    "Creating lesson plans",
    "Personalizing learning",
    "Providing feedback on assignments",
    "Self-diagnosis (health) or seeking medical advice",
    "Getting dietary advice",
    "Fixing technical problems or troubleshooting devices/software",
    "Writing resignation letters",
    "Drafting legal documents or arguments (fictional or otherwise)",
    "Simplifying or rewriting complex texts",
    "Creating memes or marketing content",
    "Building chatbots or virtual assistants",
    "Improving grammar and vocabulary",
    "Offering career or financial advice",
    "Prioritizing tasks or overcoming procrastination",
    "Seeking encouragement or motivation",
    "Entertainment (jokes, stories, games)",
    "Generating fictional characters, worlds, or societies",
    "Simulating conversations",
    "Exploring philosophical or ethical questions",
    "Making decisions",
    "Extracting or analyzing data from documents or datasets",
    "Compiling reports",
    "Creating charts or tables",
    "Planning events or schedules",
    "Recommending books, movies, or music",
    "Assisting with accessibility (e.g., text-to-speech, summarization)",
    "Generating scripts for videos or podcasts",
    "Providing travel advice or itineraries",
    "Generating AI art prompts or prompts for other AI tools",
    "Designing user interfaces",
    "Prototyping software tools",
    "Writing technical documentation",
    "Exploring AI consciousness or biases",
    "Debating free will or ethical boundaries of AI",
    "Creating puzzles or riddles",
    "Brainstorming escape plans for stories",
    "Simulating therapy for fictional characters",
    "Creating alternate endings to media",
    "Generating metadata for digital assets",
    "Crafting speeches for events (fictional or real)",
    "Writing obituaries, memorial speeches, or eulogies",
    "Writing wedding vows",
    "Simulating job performance reviews",
    "Writing privacy policies",
    "Designing product packaging text",
    "Generating sarcastic or ironic responses",
    "Playing trivia or games with AI",
    "Simulating sci-fi, fantasy, or dystopian universes",
    "Creating scripts for YouTube videos",
    "Generating song melodies with lyrics",
    "Creating virtual assistants for specific tasks",
    "Generating practice questions or quizzes",
    "Generating fake dialogue transcripts (for fiction)",
    "Designing psychological experiments",
    "Generating protest slogans or signs (for fiction)",
    "Planning escape room puzzles",
    "Reverse-engineering game mechanics (for learning)",
    "Creating fictional languages or alphabets",
    "Simulating alien communications",
    "Drafting AI ethics policies",
    "Mimicking religious sermons or texts (for fiction)",
    "Practicing law exams or mock trials",
    "Simulating business negotiations",
    "Creating internal company memos",
    "Crafting press releases",
    "Writing fake autobiographies (for fiction)",
    "Practicing persuasive arguments",
    "Generating speeches for fictional events",
    "Generating fake citations",
    "Asking for answers during online exams (cheating)",
    "Creating spam content",
    "Bypassing paywalls with summaries",
    "Writing malware or exploits",
    "Generating phishing emails",
    "Creating fake identities or profiles",
    "Automating trolling or harassment",
    "Fabricating news or misinformation",
    "Creating clickbait content (misleading)",
    "Asking for step-by-step illegal activities",
    "Writing political propaganda (manipulative)",
    "Creating extremist content",
    "Simulating celebrities for fake interviews",
    "Training chatbots to impersonate people",
    "Writing erotica or adult content (if inappropriate or unsolicited)",
    "Asking for gambling strategies",
    "Creating get-rich-quick schemes",
    "Scraping content ideas to plagiarize",
    "Generating lottery number predictions",
    "Creating pyramid scheme pitches",
    "Planning cheating strategies for games",
    "Creating misleading reviews or ratings",
    "Training AI models with GPT-generated data for unethical purposes",
    "Creating fake resumes or job histories",
    "Spoofing official announcements",
    "Creating fake academic degrees or certificates",
    "Creating false customer feedback",
    "Creating fake dialogue transcripts (if used deceptively)",
    "Generating fake user reviews",
    "Crafting fake press releases",
    "Designing fake product packaging text",
    "Writing fake autobiographies (if deceptive)",
    "Creating AI-generated conspiracy hoaxes",
    "Asking the AI to break its own rules",
    "Creating fictional science papers (if intended to deceive)",
]


intention_docs = [nlp(intent) for intent in intentions]

class IntentRequest(BaseModel):
    prompt: str

@app.post("/classify-intent")
def classify_intent(req: IntentRequest):
    prompt_doc = nlp(req.prompt)

    similarities = [(intent, prompt_doc.similarity(i_doc)) for intent, i_doc in zip(intentions, intention_docs)]
    max_intent, max_score = max(similarities, key=lambda x: x[1])
    
    threshold = 0.6
    if max_score  < threshold:
        return {"intention": None, "confidence": max_score}
    return {"intention": max_intent, "confidence": max_score}
